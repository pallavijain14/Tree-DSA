/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public int solve(TreeNode A) {
        return checksumtree(A);
    }
    public static int isLeaf(TreeNode node) {
        if (node == null)
            return 0;
        if (node.left == null && node.right == null)
            return 1;
        return 0;
    }
    public static int isSumTree(TreeNode node) {
        int ls, rs;
        if (node == null || isLeaf(node) == 1)
            return 1;

        if (isSumTree(node.left) == 1 && isSumTree(node.right) == 1) {
            if (node.left == null)
                ls = 0;
            else if (isLeaf(node.left) == 1)
                ls = node.left.val;
            else
                ls = 2 * (node.left.val);
            if (node.right == null)
                rs = 0;
            else if (isLeaf(node.right) == 1)
                rs = node.right.val;
            else
                rs = 2 * (node.right.val);
            if (node.val == ls + rs)
                return 1;
            else
                return 0;
        }
        return 0;
    }

    public static int checksumtree(TreeNode root) {
        if (isSumTree(root) == 1)
            return 1;
        return 0;
    }
}
