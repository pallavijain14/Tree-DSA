/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    private void leftMost(TreeNode root, List<TreeNode> list) {
        while (root != null) {
            list.add(root);
            if (root.left != null)
                root = root.left;
            else
                root = root.right;
        }
    }

    private void leaf(TreeNode root, List<TreeNode> list) {
        if (root != null) {
            if (root.left == null && root.right == null)
                list.add(root);
            if (root.left != null)
                leaf(root.left, list);
            if (root.right != null)
                leaf(root.right, list);
        }
    }

    private void rightMost(TreeNode root, List<TreeNode> list) {
        Stack<TreeNode> stack = new Stack<>();
        while (root != null) {
            stack.push(root);
            if (root.right != null)
                root = root.right;
            else
                root = root.left;
        }
        while (!stack.isEmpty()) {
            list.add(stack.peek());
            stack.pop();
        }
    }

    public int[] solve(TreeNode A) {
        List<Integer> ans = new ArrayList<>();
        if (A == null)
            return new int[0];
        List<TreeNode> tmp = new ArrayList<>();
        Set<TreeNode> set = new HashSet<>();
        leftMost(A, tmp);
        leaf(A, tmp);
        rightMost(A, tmp);
        for (TreeNode p : tmp) {
            if (!set.contains(p)) {
                ans.add(p.val);
                set.add(p);
            }
        }

        int[] result = new int[ans.size()];
        for (int i = 0; i < ans.size(); i++) {
            result[i] = ans.get(i);
        }
        return result;
    }
}
