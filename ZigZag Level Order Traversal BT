/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    public ArrayList < ArrayList < Integer >> zigzagLevelOrder(TreeNode A) {
        Stack < TreeNode > stack1 = new Stack < > (), stack2 = new Stack < > ();
        ArrayList < ArrayList < Integer >> zigzag = new ArrayList < > ();
        if (A == null)
            return null;

        stack1.push(A);
        while (!stack1.isEmpty() || !stack2.isEmpty()) {
            ArrayList < Integer > level = new ArrayList < > ();
            while (!stack1.isEmpty()) {
                TreeNode node = stack1.pop();
                level.add(node.val);
                if (node.left != null)
                    stack2.push(node.left);
                if (node.right != null)
                    stack2.push(node.right);
            }
            if (level.size() != 0)
                zigzag.add(level);
            level = new ArrayList < > ();

            while (!stack2.isEmpty()) {
                TreeNode node = stack2.pop();
                level.add(node.val);
                if (node.right != null)
                    stack1.push(node.right);
                if (node.left != null)
                    stack1.push(node.left);
            }
            if (level.size() != 0)
                zigzag.add(level);
        }
        return zigzag;
    }
}
